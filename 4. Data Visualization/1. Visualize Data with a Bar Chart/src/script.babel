const url = "https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json";
d3.json(url, function(err, data) {
  const dataset = data.data;
  console.log(dataset);
  
  const dataLength = dataset.length;
  console.log(dataLength);
  const width = 800;
  const height = 500;
  const padding = 60;

  // Change date strings to date objects
  let dateObjs = dataset.map((d) => {
        return new Date(d[0]);
    });
  
  // Create an SVG element
  const svg = d3.select('body')
    .append('svg')
    .attr('width', width)
    .attr('height', height)
    .attr("class", "bar-chart");
   
  // Create x scale
  const xScale = d3.scaleTime()
    .domain(d3.extent(dateObjs))
    .range([padding, width - padding]);// - padding

  // Create y scale 
  const yScale = d3.scaleLinear()
      .domain([0, d3.max(dataset, (d) => d[1])])
      .range([height - padding , padding]);

  // Create x axis
  const xAxis = d3.axisBottom(xScale);

  // Append x axis to svg element
  svg.append('g')
    .attr('id', 'x-axis')
    .attr("transform", "translate(0," + (height - padding) + ")")
    .call(xAxis);

  // Create y axis
  const yAxis = d3.axisLeft(yScale);

  // Append y axis to svg element
  svg.append('g')
    .attr('id', 'y-axis')
    .attr("transform", "translate(" + padding + ",0)")
    .call(yAxis); 
  
  // Create bars
  svg.selectAll('rect')
    .data(dataset)
    .enter()
    .append('rect')
    .attr('x', (d, i) => padding + i * ((width - 2 * padding) / dataLength))
    .attr('y', (d) => yScale(d[1]))
    .attr("width", (d) => (width - padding) / dataLength)
    .attr("height", (d) => 0)//(height - padding) -  yScale(d[1])
    .attr("fill", "#eb6383")
    .attr("class", "bar")
    .attr('data-date', (d) => d[0])
    .attr('data-gdp', (d) => d[1])
    .on('mouseover', (d, i) => {
       tooltip.style('display', null)
              .attr('data-date', d[0])
              .text(`Date: ${d[0]}, GDP: ${d[1]}`)
              .attr('x', padding + i * ((width - 2 * padding) / dataLength) )
              .attr('y', height / 2);
    
  })
    .on('mouseout', (d, i) => {
      tooltip.style('display', 'none');
  });
  
  // Tooltip
  const tooltip = svg.append('text')
                    .attr('id', 'tooltip')
                    .attr('class', 'tip');
  
// Animation
svg.selectAll("rect")
  .transition()
  .duration(700)
  .attr("y", function(d) { 
      return yScale(d[1]); 
    })
  .attr("height", function(d) { 
      return (height - padding) -  yScale(d[1]);
    })
  .delay(function(d,i){console.log(i) ; return(i*10)})
})







